import datetime
import telebot
import os
from PIL import Image
import cv2
import numpy as np

import find_digit


# –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather
token = "7363574414:AAHhw8Zl7_dHIQ70Q5OjLshwUwS_MIH9WEA"

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
SAVE_FOLDER = "downloads"
os.makedirs(SAVE_FOLDER, exist_ok=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥-—Ñ–∞–π–ª
def log_message(message):
    log_entry = (
        f"–í—Ä–µ–º—è: {datetime.datetime.now()}\n"
        f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}\n"
        f"–¢–µ–∫—Å—Ç: {message.text}\n"
        f"ID —á–∞—Ç–∞: {message.chat.id}\n"
        f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.first_name}\n"
        f"–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.last_name}\n"
        f"–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username}\n"
    )

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª
    if message.document:
        log_entry += f"–ò–º—è —Ñ–∞–π–ª–∞: {message.document.file_name}\n"

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
    if message.photo:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_name = os.path.join(SAVE_FOLDER, f"photo_{message.message_id}.jpg")
        with open(file_name, "wb") as photo_file:
            photo_file.write(downloaded_file)
        log_entry += f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {file_name}\n"
        handle_saved_photo(file_name, message)

    log_entry += "---\n"

    with open("message_log.txt", "a") as log_file:
        log_file.write(log_entry)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Ü–∏—Ñ—Ä—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
def find_digit_coordinates(main_image_path, digit_image_path):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    main_image = cv2.imread(main_image_path, cv2.IMREAD_GRAYSCALE)
    digit_image = cv2.imread(digit_image_path, cv2.IMREAD_GRAYSCALE)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    result = cv2.matchTemplate(main_image, digit_image, cv2.TM_CCOEFF_NORMED)
    threshold = 0.8  # –£—Ä–æ–≤–µ–Ω—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π
    locations = np.where(result >= threshold)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —É–≥–ª–∞
    coordinates = list(zip(locations[1], locations[0]))
    return coordinates

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É–¥–æ–∫—É –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def extract_sudoku_from_image(file_name):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É–¥–æ–∫—É –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # –ü–æ–∫–∞ –≤–µ—Ä–Ω—ë–º –ø—Ä–∏–º–µ—Ä —Å–µ—Ç–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    extracted_grid = [
        [5, 3, 0, 0, 7, 0, 0, 0, 0],
        [6, 0, 0, 1, 9, 5, 0, 0, 0],
        [0, 9, 8, 0, 0, 0, 0, 6, 0],
        [8, 0, 0, 0, 6, 0, 0, 0, 3],
        [4, 0, 0, 8, 0, 3, 0, 0, 1],
        [7, 0, 0, 0, 2, 0, 0, 0, 6],
        [0, 6, 0, 0, 0, 0, 2, 8, 0],
        [0, 0, 0, 4, 1, 9, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 0, 7, 9]
    ]
    return extracted_grid

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å—É–¥–æ–∫—É
def solve_sudoku(grid):
    # –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∞ –∫–∞–∫ 0
    def is_valid(num, row, col):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É
        if num in grid[row]:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É
        if num in [grid[i][col] for i in range(9)]:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º 3x3 –∫–≤–∞–¥—Ä–∞—Ç
        start_row, start_col = 3 * (row // 3), 3 * (col // 3)
        for i in range(start_row, start_row + 3):
            for j in range(start_col, start_col + 3):
                if grid[i][j] == num:
                    return False

        return True

    def solve():
        for row in range(9):
            for col in range(9):
                if grid[row][col] == 0:
                    for num in range(1, 10):
                        if is_valid(num, row, col):
                            grid[row][col] = num
                            if solve():
                                return True
                            grid[row][col] = 0
                    return False
        return True

    solve()
    return grid


def handle_saved_photo(file_name, message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ, —Ä–µ—à–∞–µ—Ç —Å—É–¥–æ–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    with Image.open(file_name) as img:
        width, height = img.size

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if width == 591 and height == 1280:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–¥–æ–∫—É –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        sudoku_grid = find_digit.sudoku_image_to_array(file_name)

        # –†–µ—à–∞–µ–º —Å—É–¥–æ–∫—É
        solved_grid = solve_sudoku(sudoku_grid)
        bot.send_message(message.chat.id, "–°—É–¥–æ–∫—É —Ä–µ—à–µ–Ω–æ!")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–¥–µ—á–∫–æ
        bot.send_message(message.chat.id, "üòÄÔ∏è")

        # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        find_digit.overlay_sudoku_solution(file_name, solved_grid)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        base_name, ext = os.path.splitext(file_name)
        solved_image_path = f"{base_name}_solved{ext}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(solved_image_path, 'rb') as solved_image:
            bot.send_photo(message.chat.id, solved_image)


try:
    bot = telebot.TeleBot(token)
    print("–ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")

try:
    bot_info = bot.get_me()
    print(bot_info)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ get_me: {e}")

@bot.message_handler(func = lambda message: True)
def handle_message(message):
    bot.reply_to(message, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ!")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥-—Ñ–∞–π–ª
    log_message(message)


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    print(f"ID —Ñ–∞–π–ª–∞: {message.photo[-1].file_id}")  # ID —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ
    bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ!")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥-—Ñ–∞–π–ª
    log_message(message)


while True:
    try:
        bot.infinity_polling(timeout = 10, long_polling_timeout = 5)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ bot.infinity_polling: {e}")

