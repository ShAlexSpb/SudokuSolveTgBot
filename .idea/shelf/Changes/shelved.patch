Index: .idea/SudokuTgBot.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/SudokuTgBot.iml b/.idea/SudokuTgBot.iml
new file mode 100644
--- /dev/null	(date 1740060783019)
+++ b/.idea/SudokuTgBot.iml	(date 1740060783019)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/.venv" />
+    </content>
+    <orderEntry type="jdk" jdkName="Python 3.10 (SudokuTgBot)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: beaty_digit.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/beaty_digit.py b/beaty_digit.py
new file mode 100644
--- /dev/null	(date 1740142169424)
+++ b/beaty_digit.py	(date 1740142169424)
@@ -0,0 +1,247 @@
+import os
+import cv2
+
+
+def draw_horizontal_line(image_path, x, thickness, output_dir="foto4beauty"):
+    # Загружаем изображение
+    image = cv2.imread(image_path)
+    if image is None:
+        print(f"Ошибка: Не удалось загрузить {image_path}")
+        return
+
+    # Определяем границы линии
+    height, width, _ = image.shape
+    y_start = max(0, x - thickness // 2)
+    y_end = min(height, x + thickness // 2)
+
+    # Рисуем линию
+    image[y_start:y_end, :] = (0, 255, 0)  # Зеленый цвет (BGR)
+
+    # Создаем новое имя файла
+    base_name = os.path.basename(image_path)
+    name, ext = os.path.splitext(base_name)
+    output_path = os.path.join(output_dir, f"{name}_x{x}_t{thickness}{ext}")
+
+    # Сохраняем изображение
+    cv2.imwrite(output_path, image)
+
+    # Отображаем изображение
+    cv2.imshow("Result", image)
+    cv2.waitKey(0)
+    cv2.destroyAllWindows()
+
+    print(f"Изображение сохранено: {output_path}")
+
+def clear_sudoku2solution(input_image_path: str):
+    """
+    Проходит по всем элементам массива solved_grid и накладывает соответствующее изображение цифры
+    на изображение судоку в нужные координаты из cell_bounds.
+
+    :param input_image_path: Путь к изображению судоку (JPG).
+    """
+    cell_bounds = [
+        ((37, 290), (73, 335)),  # 1:1
+        ((95, 290), (130, 335)),  # 1:2
+        ((150, 290), (190, 335)),  # 1:3
+        ((221, 290), (256, 335)),  # 1:4
+        ((278, 290), (312, 335)),  # 1:5
+        ((335, 290), (370, 335)),  # 1:6
+        ((404, 290), (438, 335)),  # 1:7
+        ((460, 290), (493, 335)),  # 1:8
+        ((517, 290), (553, 335)),  # 1:9
+
+        ((37, 349), (73, 391)),  # 2:1
+        ((95, 349), (130, 391)),  # 2:2
+        ((150, 349), (190, 391)),  # 2:3
+        ((221, 349), (256, 391)),  # 2:4
+        ((278, 349), (312, 391)),  # 2:5
+        ((335, 349), (370, 391)),  # 2:6
+        ((404, 349), (438, 391)),  # 2:7
+        ((460, 349), (493, 391)),  # 2:8
+        ((517, 349), (553, 391)),  # 2:9
+
+        ((37, 406), (73, 448)),  # 3:1
+        ((95, 406), (130, 448)),  # 3:2
+        ((150, 406), (190, 448)),  # 3:3
+        ((221, 406), (256, 448)),  # 3:4
+        ((278, 406), (312, 448)),  # 3:5
+        ((335, 406), (370, 448)),  # 3:6
+        ((404, 406), (438, 448)),  # 3:7
+        ((460, 406), (493, 448)),  # 3:8
+        ((517, 406), (553, 448)),  # 3:9
+
+        ((37, 474), (73, 515)),  # 4:1
+        ((95, 474), (130, 515)),  # 4:2
+        ((150, 474), (190, 515)),  # 4:3
+        ((221, 474), (256, 515)),  # 4:4
+        ((278, 474), (312, 515)),  # 4:5
+        ((335, 474), (370, 515)),  # 4:6
+        ((404, 474), (438, 515)),  # 4:7
+        ((460, 474), (493, 515)),  # 4:8
+        ((517, 474), (553, 515)),  # 4:9
+
+        ((37, 531), (73, 574)),  # 5:1
+        ((95, 531), (130, 574)),  # 5:2
+        ((150, 531), (190, 574)),  # 5:3
+        ((221, 531), (256, 574)),  # 5:4
+        ((278, 531), (312, 574)),  # 5:5
+        ((335, 531), (370, 574)),  # 5:6
+        ((404, 531), (438, 574)),  # 5:7
+        ((460, 531), (493, 574)),  # 5:8
+        ((517, 531), (553, 574)),  # 5:9
+
+        ((37, 589), (73, 632)),  # 6:1
+        ((95, 589), (130, 632)),  # 6:2
+        ((150, 589), (190, 632)),  # 6:3
+        ((221, 589), (256, 632)),  # 6:4
+        ((278, 589), (312, 632)),  # 6:5
+        ((335, 589), (370, 632)),  # 6:6
+        ((404, 589), (438, 632)),  # 6:7
+        ((460, 589), (493, 632)),  # 6:8
+        ((517, 589), (553, 632)),  # 6:9
+
+        ((37, 655), (73, 705)),  # 7:1
+        ((95, 655), (130, 705)),  # 7:2
+        ((150, 655), (190, 705)),  # 7:3
+        ((221, 655), (256, 705)),  # 7:4
+        ((278, 655), (312, 705)),  # 7:5
+        ((335, 655), (370, 705)),  # 7:6
+        ((404, 655), (438, 705)),  # 7:7
+        ((460, 655), (493, 705)),  # 7:8
+        ((517, 655), (553, 705)),  # 7:9
+
+        ((37, 713), (73, 760)),  # 8:1
+        ((95, 713), (130, 760)),  # 8:2
+        ((150, 713), (190, 760)),  # 8:3
+        ((221, 713), (256, 760)),  # 8:4
+        ((278, 713), (312, 760)),  # 8:5
+        ((335, 713), (370, 760)),  # 8:6
+        ((404, 713), (438, 760)),  # 8:7
+        ((460, 713), (493, 760)),  # 8:8
+        ((517, 713), (553, 760)),  # 8:9
+
+        ((37, 771), (73, 820)),  # 9:1
+        ((95, 771), (130, 820)),  # 9:2
+        ((150, 771), (190, 820)),  # 9:3
+        ((221, 771), (256, 820)),  # 9:4
+        ((278, 771), (312, 820)),  # 9:5
+        ((335, 771), (370, 820)),  # 9:6
+        ((404, 771), (438, 820)),  # 9:7
+        ((460, 771), (493, 820)),  # 9:8
+        ((517, 771), (553, 820)),  # 9:9
+    ]
+
+    # Загружаем изображение судоку
+    base_image = cv2.imread(input_image_path)
+    if base_image is None:
+        print("Ошибка: Не удалось загрузить изображение судоку.")
+        return
+
+    overlay_path = f"foto4beauty/2_canvas_crop_x300_y430_w255.jpg"
+    #overlay_path = f"foto4beauty/2_crop_x452_y289_w56.jpg"
+    overlay_image = cv2.imread(overlay_path)
+    if overlay_image is None:
+        print(f"Ошибка: Не найден файл {overlay_path}")
+        return
+
+    # Проходим по всему решенному судоку и накладываем соответствующие цифры
+    for row in range(9):
+        for col in range(9):
+            # Получаем координаты верхнего левого угла
+            x, y = cell_bounds[row * 9 + col][0]
+            x -= 8
+
+            # Получаем размеры накладываемого изображения
+            h, w = overlay_image.shape[:2]
+
+            # Накладываем изображение
+            #base_image[y:y + h, x:x + w] = overlay_image
+            x = 300
+            y = 430
+            base_image[y:y + h, x:x + w] = overlay_image
+
+    # Генерируем имя выходного файла
+    base_name, ext = os.path.splitext(input_image_path)
+    output_image_path = f"{base_name}_canvas{ext}"
+
+    # Сохраняем изображение
+    cv2.imwrite(output_image_path, base_image, [cv2.IMWRITE_JPEG_QUALITY, 95])
+    print(f"Очищенное судоку сохранено как {output_image_path}")
+
+
+def crop_square(image_path, x, y, width, output_dir="foto4beauty"):
+    # Загружаем изображение с поддержкой прозрачности
+    image = cv2.imread(image_path, cv2.IMREAD_UNCHANGED)
+    if image is None:
+        print(f"Ошибка: Не удалось загрузить {image_path}")
+        return
+
+    # Проверяем, есть ли альфа-канал
+    if image.shape[-1] == 4:
+        b, g, r, a = cv2.split(image)
+        image = cv2.merge((b, g, r))  # Убираем альфа-канал для обрезки
+
+    # Обрезаем квадрат из изображения
+    cropped_image = image[y:y + width, x:x + width]
+
+    # Если был альфа-канал, восстанавливаем его
+    if 'a' in locals():
+        a_cropped = a[y:y + width, x:x + width]
+        cropped_image = cv2.merge((cropped_image, a_cropped))
+
+    # Создаем новое имя файла
+    base_name = os.path.basename(image_path)
+    name, ext = os.path.splitext(base_name)
+    output_path = os.path.join(output_dir, f"{name}_crop_x{x}_y{y}_w{width}{ext}")
+
+    # Сохраняем изображение
+    cv2.imwrite(output_path, cropped_image)
+
+    print(f"Изображение сохранено: {output_path}")
+
+
+def draw_green_square(image_path, x, y, width, output_dir="foto4beauty"):
+    # Загружаем изображение с поддержкой прозрачности
+    image = cv2.imread(image_path, cv2.IMREAD_UNCHANGED)
+    if image is None:
+        print(f"Ошибка: Не удалось загрузить {image_path}")
+        return
+
+    # Проверяем, есть ли альфа-канал
+    if image.shape[-1] == 4:
+        b, g, r, a = cv2.split(image)
+        image = cv2.merge((b, g, r))  # Убираем альфа-канал для рисования
+
+    # Определяем координаты левого верхнего угла
+    x1, y1 = x, y
+    x2, y2 = x + width, y + width
+
+    # Рисуем квадрат
+    cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), -1)  # Зеленый квадрат
+
+    # Если был альфа-канал, восстанавливаем его
+    if 'a' in locals():
+        image = cv2.merge((image, a))
+
+    # Создаем новое имя файла
+    base_name = os.path.basename(image_path)
+    name, ext = os.path.splitext(base_name)
+    output_path = os.path.join(output_dir, f"{name}_square_x{x}_y{y}_w{width}{ext}")
+
+    # Сохраняем изображение
+    cv2.imwrite(output_path, image)
+
+    # Отображаем изображение
+    #cv2.imshow("Result", image)
+    #cv2.waitKey(0)
+    #cv2.destroyAllWindows()
+
+    print(f"Изображение сохранено: {output_path}")
+
+
+# Пример использования
+if __name__ == "__main__":
+    # Укажите путь к вашему изображению
+    #draw_green_square("foto4beauty/3_canvas.jpg", 20, 280, 555)
+    crop_square("Foto4beauty/3_canvas.jpg", 20, 280, 555, "Foto4beauty")
+    #clear_sudoku2solution("Foto4beauty/3_canvas.jpg")
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1736517975920)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1736517975920)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1736517975946)
+++ b/.idea/.gitignore	(date 1736517975946)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1736517975911)
+++ b/.idea/modules.xml	(date 1736517975911)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/SudokuTgBot.iml" filepath="$PROJECT_DIR$/.idea/SudokuTgBot.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: find_digit.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/find_digit.py b/find_digit.py
new file mode 100644
--- /dev/null	(date 1740151301784)
+++ b/find_digit.py	(date 1740151301784)
@@ -0,0 +1,341 @@
+from PIL import Image
+import cv2
+import numpy as np
+import os
+
+def display_image(file_name):
+    try:
+        # Открываем изображение
+        img = Image.open(file_name)
+        # Отображаем изображение
+        img.show()
+    except FileNotFoundError:
+        print(f"Файл '{file_name}' не найден.")
+    except Exception as e:
+        print(f"Произошла ошибка: {e}")
+
+
+def find_template_occurrences(main_image_path: str, template_image_path: str, threshold: float = 0.8) -> list:
+    """
+    Ищет вхождения второй картинки в первую и возвращает список координат центров найденных совпадений.
+
+    :param main_image_path: Путь к изображению, в котором ищем шаблон.
+    :param template_image_path: Путь к изображению-шаблону.
+    :param threshold: Порог совпадения (по умолчанию 0.8, то есть 80%).
+    :return: Список координат (x, y) центров найденных шаблонов.
+    """
+    main_image = cv2.imread(main_image_path, cv2.IMREAD_GRAYSCALE)
+    template_image = cv2.imread(template_image_path, cv2.IMREAD_GRAYSCALE)
+
+    if main_image is None or template_image is None:
+        print("Ошибка загрузки изображений.")
+        return []
+
+    template_h, template_w = template_image.shape
+    result = cv2.matchTemplate(main_image, template_image, cv2.TM_CCOEFF_NORMED)
+    locations = np.where(result >= threshold)
+
+    match_points = [(x + template_w // 2, y + template_h // 2) for x, y in zip(*locations[::-1])]
+
+    return match_points
+
+
+def process_sudoku_matches(match_points: list, sudoku_grid: list, digit: int) -> list:
+    """
+    Записывает цифру в соответствующую ячейку судоку, если координата из match_points попадает внутрь одного из 81 квадратов.
+
+    :param match_points: Массив координат совпадений.
+    :param sudoku_grid: Исходный массив значений судоку.
+    :param digit: Цифра, которую проверяем.
+    :return: Обновленный массив значений судоку.
+    """
+    cell_bounds = [
+        ((37, 290), (73, 335)),     # 1:1
+        ((95, 290), (130, 335)),    # 1:2
+        ((150, 290), (190, 335)),   # 1:3
+        ((221, 290), (256, 335)),   # 1:4
+        ((278, 290), (312, 335)),   # 1:5
+        ((335, 290), (370, 335)),   # 1:6
+        ((404, 290), (438, 335)),   # 1:7
+        ((463, 290), (493, 335)),   # 1:8
+        ((519, 290), (553, 335)),   # 1:9
+
+        ((37, 351), (73, 391)),    # 2:1
+        ((95, 351), (130, 391)),   # 2:2
+        ((150, 351), (190, 391)),  # 2:3
+        ((221, 351), (256, 391)),  # 2:4
+        ((278, 351), (312, 391)),  # 2:5
+        ((335, 351), (370, 391)),  # 2:6
+        ((404, 351), (438, 391)),  # 2:7
+        ((463, 351), (493, 391)),  # 2:8
+        ((519, 351), (553, 391)),  # 2:9
+
+        ((37, 408), (73, 448)),    # 3:1
+        ((95, 408), (130, 448)),   # 3:2
+        ((150, 408), (190, 448)),  # 3:3
+        ((221, 408), (256, 448)),  # 3:4
+        ((278, 408), (312, 448)),  # 3:5
+        ((335, 408), (370, 448)),  # 3:6
+        ((404, 408), (438, 448)),  # 3:7
+        ((463, 408), (493, 448)),  # 3:8
+        ((519, 408), (553, 448)),  # 3:9
+
+        ((37, 477), (73, 515)),    # 4:1
+        ((95, 477), (130, 515)),   # 4:2
+        ((150, 477), (190, 515)),  # 4:3
+        ((221, 477), (256, 515)),  # 4:4
+        ((278, 477), (312, 515)),  # 4:5
+        ((335, 477), (370, 515)),  # 4:6
+        ((404, 477), (438, 515)),  # 4:7
+        ((463, 477), (493, 515)),  # 4:8
+        ((519, 477), (553, 515)),  # 4:9
+
+        ((37, 534), (73, 574)),    # 5:1
+        ((95, 534), (130, 574)),   # 5:2
+        ((150, 534), (190, 574)),  # 5:3
+        ((221, 534), (256, 574)),  # 5:4
+        ((278, 534), (312, 574)),  # 5:5
+        ((335, 534), (370, 574)),  # 5:6
+        ((404, 534), (438, 574)),  # 5:7
+        ((463, 534), (493, 574)),  # 5:8
+        ((519, 534), (553, 574)),  # 5:9
+
+        ((37, 592), (73, 632)),    # 6:1
+        ((95, 592), (130, 632)),   # 6:2
+        ((150, 592), (190, 632)),  # 6:3
+        ((221, 592), (256, 632)),  # 6:4
+        ((278, 592), (312, 632)),  # 6:5
+        ((335, 592), (370, 632)),  # 6:6
+        ((404, 592), (438, 632)),  # 6:7
+        ((463, 592), (493, 632)),  # 6:8
+        ((519, 592), (553, 632)),  # 6:9
+
+        ((37, 655), (73, 705)),    # 7:1
+        ((95, 655), (130, 705)),   # 7:2
+        ((150, 655), (190, 705)),  # 7:3
+        ((221, 655), (256, 705)),  # 7:4
+        ((278, 655), (312, 705)),  # 7:5
+        ((335, 655), (370, 705)),  # 7:6
+        ((404, 655), (438, 705)),  # 7:7
+        ((463, 655), (493, 705)),  # 7:8
+        ((519, 655), (553, 705)),  # 7:9
+
+        ((37, 715), (73, 760)),    # 8:1
+        ((95, 715), (130, 760)),   # 8:2
+        ((150, 715), (190, 760)),  # 8:3
+        ((221, 715), (256, 760)),  # 8:4
+        ((278, 715), (312, 760)),  # 8:5
+        ((335, 715), (370, 760)),  # 8:6
+        ((404, 715), (438, 760)),  # 8:7
+        ((463, 715), (493, 760)),  # 8:8
+        ((519, 715), (553, 760)),  # 8:9
+
+        ((37, 771), (73, 820)),    # 9:1
+        ((95, 771), (130, 820)),   # 9:2
+        ((150, 771), (190, 820)),  # 9:3
+        ((221, 771), (256, 820)),  # 9:4
+        ((278, 771), (312, 820)),  # 9:5
+        ((335, 771), (370, 820)),  # 9:6
+        ((404, 771), (438, 820)),  # 9:7
+        ((463, 771), (493, 820)),  # 9:8
+        ((519, 771), (553, 820)),  # 9:9
+    ]
+
+    for x, y in match_points:
+        for idx, ((x1, y1), (x2, y2)) in enumerate(cell_bounds):
+            row, col = divmod(idx, 9)  # Определяем строку и столбец ячейки
+            if x1 <= x <= x2 and y1 <= y <= y2:
+                sudoku_grid[row][col] = digit  # Записываем цифру в нужную ячейку
+                break  # Останавливаемся после первого совпадения
+
+    return sudoku_grid
+
+
+def sudoku_image_to_array(file_name: str) -> list:
+    sudoku_array = [[0 for _ in range(9)] for _ in range(9)]
+
+    for digit in range(1, 10):
+        match_points = find_template_occurrences(file_name, "source_digit/" + str(digit) + "_ss.png", 0.9)
+        process_sudoku_matches(match_points, sudoku_array, digit)
+
+    return sudoku_array
+
+
+def overlay_sudoku_solution(input_image_path: str, solved_grid: list):
+    """
+    Проходит по всем элементам массива solved_grid и накладывает соответствующее изображение цифры
+    на изображение судоку в нужные координаты из cell_bounds.
+
+    :param input_image_path: Путь к изображению судоку (JPG).
+    :param solved_grid: 9x9 массив с решенной судоку.
+    """
+    cell_bounds = [
+        ((37, 291), (73, 335)),  # 1:1
+        ((95, 291), (130, 335)),  # 1:2
+        ((150, 291), (190, 335)),  # 1:3
+        ((221, 291), (256, 335)),  # 1:4
+        ((278, 291), (312, 335)),  # 1:5
+        ((335, 291), (370, 335)),  # 1:6
+        ((404, 291), (438, 335)),  # 1:7
+        ((463, 291), (493, 335)),  # 1:8
+        ((519, 291), (553, 335)),  # 1:9
+
+        ((37, 349), (73, 391)),  # 2:1
+        ((95, 349), (130, 391)),  # 2:2
+        ((150, 349), (190, 391)),  # 2:3
+        ((221, 349), (256, 391)),  # 2:4
+        ((278, 349), (312, 391)),  # 2:5
+        ((335, 349), (370, 391)),  # 2:6
+        ((404, 349), (438, 391)),  # 2:7
+        ((463, 349), (493, 391)),  # 2:8
+        ((519, 349), (553, 391)),  # 2:9
+
+        ((37, 405), (73, 448)),  # 3:1
+        ((95, 405), (130, 448)),  # 3:2
+        ((150, 405), (190, 448)),  # 3:3
+        ((221, 405), (256, 448)),  # 3:4
+        ((278, 405), (312, 448)),  # 3:5
+        ((335, 405), (370, 448)),  # 3:6
+        ((404, 405), (438, 448)),  # 3:7
+        ((463, 405), (493, 448)),  # 3:8
+        ((519, 405), (553, 448)),  # 3:9
+
+        ((37, 471), (73, 515)),  # 4:1
+        ((95, 471), (130, 515)),  # 4:2
+        ((150, 471), (190, 515)),  # 4:3
+        ((221, 471), (256, 515)),  # 4:4
+        ((278, 471), (312, 515)),  # 4:5
+        ((335, 471), (370, 515)),  # 4:6
+        ((404, 471), (438, 515)),  # 4:7
+        ((463, 471), (493, 515)),  # 4:8
+        ((519, 471), (553, 515)),  # 4:9
+
+        ((37, 531), (73, 574)),  # 5:1
+        ((95, 531), (130, 574)),  # 5:2
+        ((150, 531), (190, 574)),  # 5:3
+        ((221, 531), (256, 574)),  # 5:4
+        ((278, 531), (312, 574)),  # 5:5
+        ((335, 531), (370, 574)),  # 5:6
+        ((404, 531), (438, 574)),  # 5:7
+        ((463, 531), (493, 574)),  # 5:8
+        ((519, 531), (553, 574)),  # 5:9
+
+        ((37, 590), (73, 632)),  # 6:1
+        ((95, 590), (130, 632)),  # 6:2
+        ((150, 590), (190, 632)),  # 6:3
+        ((221, 590), (256, 632)),  # 6:4
+        ((278, 590), (312, 632)),  # 6:5
+        ((335, 590), (370, 632)),  # 6:6
+        ((404, 590), (438, 632)),  # 6:7
+        ((463, 590), (493, 632)),  # 6:8
+        ((519, 590), (553, 632)),  # 6:9
+
+        ((37, 655), (73, 705)),  # 7:1
+        ((95, 655), (130, 705)),  # 7:2
+        ((150, 655), (190, 705)),  # 7:3
+        ((221, 655), (256, 705)),  # 7:4
+        ((278, 655), (312, 705)),  # 7:5
+        ((335, 655), (370, 705)),  # 7:6
+        ((404, 655), (438, 705)),  # 7:7
+        ((463, 655), (493, 705)),  # 7:8
+        ((519, 655), (553, 705)),  # 7:9
+
+        ((37, 713), (73, 760)),  # 8:1
+        ((95, 713), (130, 760)),  # 8:2
+        ((150, 713), (190, 760)),  # 8:3
+        ((221, 713), (256, 760)),  # 8:4
+        ((278, 713), (312, 760)),  # 8:5
+        ((335, 713), (370, 760)),  # 8:6
+        ((404, 713), (438, 760)),  # 8:7
+        ((463, 713), (493, 760)),  # 8:8
+        ((519, 713), (553, 760)),  # 8:9
+
+        ((37, 771), (73, 820)),  # 9:1
+        ((95, 771), (130, 820)),  # 9:2
+        ((150, 771), (190, 820)),  # 9:3
+        ((221, 771), (256, 820)),  # 9:4
+        ((278, 771), (312, 820)),  # 9:5
+        ((335, 771), (370, 820)),  # 9:6
+        ((404, 771), (438, 820)),  # 9:7
+        ((463, 771), (493, 820)),  # 9:8
+        ((519, 771), (553, 820)),  # 9:9
+    ]
+
+    # Загружаем изображение судоку
+    base_image = cv2.imread(input_image_path)
+    if base_image is None:
+        print("Ошибка: Не удалось загрузить изображение судоку.")
+        return
+
+    # добавлена 21.02.25
+    # очищает поле судоку, что бы не было наложений на стрые значения судоку
+    overlay_path = f"source_digit/canvas_crop_x20_y280_w555.jpg"
+
+    # Проверяем, существует ли изображение цифры
+    if not os.path.exists(overlay_path):
+        print(f"Ошибка: Не найден файл {overlay_path}")
+        return
+
+    # Загружаем изображение цифры
+    overlay = cv2.imread(overlay_path)
+    if overlay is None:
+        print(f"Ошибка: Не удалось загрузить {overlay_path}")
+        return
+
+    # Получаем размеры накладываемого изображения
+    h, w = overlay.shape[:2]
+
+    # Накладываем изображение
+    x = 20
+    y = 280
+    base_image[y:y + h, x:x + w] = overlay
+
+    # Проходим по всему решенному судоку и накладываем соответствующие цифры
+    for row in range(9):
+        for col in range(9):
+            digit = solved_grid[row][col]
+            overlay_path = f"source_digit/{digit}_bb.png"
+
+            # Проверяем, существует ли изображение цифры
+            if not os.path.exists(overlay_path):
+                print(f"Ошибка: Не найден файл {overlay_path}")
+                continue
+
+            # Загружаем изображение цифры
+            overlay = cv2.imread(overlay_path)
+            if overlay is None:
+                print(f"Ошибка: Не удалось загрузить {overlay_path}")
+                continue
+
+            # Получаем координаты верхнего левого угла
+            x, y = cell_bounds[row * 9 + col][0]
+            x -= 8
+
+            # Получаем размеры накладываемого изображения
+            h, w = overlay.shape[:2]
+
+            # Накладываем изображение
+            base_image[y:y + h, x:x + w] = overlay
+
+    # Генерируем имя выходного файла
+    base_name, ext = os.path.splitext(input_image_path)
+    output_image_path = f"{base_name}_solved{ext}"
+
+    # Сохраняем изображение
+    cv2.imwrite(output_image_path, base_image, [cv2.IMWRITE_JPEG_QUALITY, 95])
+    print(f"Решенное судоку сохранено как {output_image_path}")
+
+# Пример использования
+if __name__ == "__main__":
+    # Укажите путь к вашему изображению
+    # image_file = input("Введите путь к файлу изображения: ")
+    #display_image("downloads/photo_235.jpg")
+    points = find_template_occurrences("downloads/photo_299.jpg", "source_digit/5_ss.png", 0.9)
+    print(points)
+    print(len(points))
+    sudoku_grid = sudoku_image_to_array("downloads/photo_299.jpg")
+
+    overlay_sudoku_solution("downloads/photo_299.jpg", sudoku_grid)
+
+    for row in sudoku_grid:
+        print(" ".join(map(str, row)))
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1736517975914)
+++ b/.idea/misc.xml	(date 1736517975914)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.10 (SudokuTgBot)" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1741094460176)
+++ b/.idea/vcs.xml	(date 1741094460176)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: message_log.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/message_log.txt b/message_log.txt
new file mode 100644
--- /dev/null	(date 1739891914221)
+++ b/message_log.txt	(date 1739891914221)
@@ -0,0 +1,172 @@
+Время: 2025-01-17 20:27:46.484053
+ID сообщения: 209
+Текст: /start
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Shepilov
+Логин пользователя: @ShAlex_SPb
+---
+Время: 2025-01-17 20:28:16.725404
+ID сообщения: 211
+Текст: None
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Shepilov
+Логин пользователя: @ShAlex_SPb
+---
+Время: 2025-01-17 20:32:06.322095
+ID сообщения: 213
+Текст: /start
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Shepilov
+Логин пользователя: @ShAlex_SPb
+---
+Время: 2025-01-17 20:32:26.314338
+ID сообщения: 215
+Текст: None
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Shepilov
+Логин пользователя: @ShAlex_SPb
+---
+Время: 2025-01-17 20:42:22.458134
+ID сообщения: 217
+Текст: /start
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Shepilov
+Логин пользователя: @ShAlex_SPb
+---
+Время: 2025-01-17 20:44:28.143272
+ID сообщения: 221
+Текст: /start
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Shepilov
+Логин пользователя: @ShAlex_SPb
+---
+Время: 2025-01-17 20:44:39.237291
+ID сообщения: 223
+Текст: None
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Shepilov
+Логин пользователя: @ShAlex_SPb
+Фото сохранено как: downloads/photo_223.jpg
+---
+Время: 2025-01-17 20:56:36.151676
+ID сообщения: 225
+Текст: None
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Shepilov
+Логин пользователя: @ShAlex_SPb
+Фото сохранено как: downloads/photo_225.jpg
+---
+Время: 2025-01-17 21:07:52.097505
+ID сообщения: 231
+Текст: None
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Shepilov
+Логин пользователя: @ShAlex_SPb
+Фото сохранено как: downloads/photo_231.jpg
+---
+Время: 2025-01-17 21:08:31.112669
+ID сообщения: 235
+Текст: None
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Shepilov
+Логин пользователя: @ShAlex_SPb
+Фото сохранено как: downloads/photo_235.jpg
+---
+Время: 2025-01-17 21:52:31.428371
+ID сообщения: 239
+Текст: None
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Shepilov
+Логин пользователя: @ShAlex_SPb
+Фото сохранено как: downloads/photo_239.jpg
+---
+Время: 2025-01-17 21:52:59.447288
+ID сообщения: 243
+Текст: None
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Shepilov
+Логин пользователя: @ShAlex_SPb
+Фото сохранено как: downloads/photo_243.jpg
+---
+Время: 2025-01-18 15:18:40.976798
+ID сообщения: 246
+Текст: None
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Shepilov
+Логин пользователя: @ShAlex_SPb
+Фото сохранено как: downloads/photo_246.jpg
+---
+Время: 2025-02-17 21:52:36.184821
+ID сообщения: 273
+Текст: /start
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Sh
+Логин пользователя: @ShAlex_SPb
+---
+Время: 2025-02-17 21:53:29.991926
+ID сообщения: 275
+Текст: None
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Sh
+Логин пользователя: @ShAlex_SPb
+Фото сохранено как: downloads/photo_275.jpg
+---
+Время: 2025-02-18 18:11:13.281495
+ID сообщения: 280
+Текст: /start
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Sh
+Логин пользователя: @ShAlex_SPb
+---
+Время: 2025-02-18 18:11:22.185949
+ID сообщения: 282
+Текст: None
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Sh
+Логин пользователя: @ShAlex_SPb
+Фото сохранено как: downloads/photo_282.jpg
+---
+Время: 2025-02-18 18:17:14.525910
+ID сообщения: 288
+Текст: None
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Sh
+Логин пользователя: @ShAlex_SPb
+Фото сохранено как: downloads/photo_288.jpg
+---
+Время: 2025-02-18 18:17:59.445638
+ID сообщения: 294
+Текст: None
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Sh
+Логин пользователя: @ShAlex_SPb
+Фото сохранено как: downloads/photo_294.jpg
+---
+Время: 2025-02-18 18:18:31.724794
+ID сообщения: 299
+Текст: None
+ID чата: 430440517
+Имя пользователя: Alex
+Фамилия пользователя: Sh
+Логин пользователя: @ShAlex_SPb
+Фото сохранено как: downloads/photo_299.jpg
+---
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
new file mode 100644
--- /dev/null	(date 1741094636915)
+++ b/main.py	(date 1741094636915)
@@ -0,0 +1,183 @@
+import datetime
+import telebot
+import os
+from PIL import Image
+import cv2
+import numpy as np
+
+import find_digit
+
+
+# Укажите здесь ваш токен от BotFather
+token = ""
+
+# Папка для сохранения файлов
+SAVE_FOLDER = "downloads"
+os.makedirs(SAVE_FOLDER, exist_ok=True)
+
+# Функция для записи данных сообщения в лог-файл
+def log_message(message):
+    log_entry = (
+        f"Время: {datetime.datetime.now()}\n"
+        f"ID сообщения: {message.message_id}\n"
+        f"Текст: {message.text}\n"
+        f"ID чата: {message.chat.id}\n"
+        f"Имя пользователя: {message.from_user.first_name}\n"
+        f"Фамилия пользователя: {message.from_user.last_name}\n"
+        f"Логин пользователя: @{message.from_user.username}\n"
+    )
+
+    # Если сообщение содержит файл
+    if message.document:
+        log_entry += f"Имя файла: {message.document.file_name}\n"
+
+    # Если сообщение содержит фото
+    if message.photo:
+        # Получаем самое большое фото
+        file_info = bot.get_file(message.photo[-1].file_id)
+        downloaded_file = bot.download_file(file_info.file_path)
+        file_name = os.path.join(SAVE_FOLDER, f"photo_{message.message_id}.jpg")
+        with open(file_name, "wb") as photo_file:
+            photo_file.write(downloaded_file)
+        log_entry += f"Фото сохранено как: {file_name}\n"
+        handle_saved_photo(file_name, message)
+
+    log_entry += "---\n"
+
+    with open("message_log.txt", "a") as log_file:
+        log_file.write(log_entry)
+
+# Функция для поиска координат совпадений цифры на изображении
+def find_digit_coordinates(main_image_path, digit_image_path):
+    # Загружаем изображения
+    main_image = cv2.imread(main_image_path, cv2.IMREAD_GRAYSCALE)
+    digit_image = cv2.imread(digit_image_path, cv2.IMREAD_GRAYSCALE)
+
+    # Применяем шаблонное совпадение
+    result = cv2.matchTemplate(main_image, digit_image, cv2.TM_CCOEFF_NORMED)
+    threshold = 0.8  # Уровень совпадения для признания области подходящей
+    locations = np.where(result >= threshold)
+
+    # Преобразуем результаты в список координат верхнего левого угла
+    coordinates = list(zip(locations[1], locations[0]))
+    return coordinates
+
+# Функция для извлечения судоку из изображения
+def extract_sudoku_from_image(file_name):
+    # Здесь должна быть реализация извлечения судоку из изображения
+    # Пока вернём пример сетки для тестирования
+    extracted_grid = [
+        [5, 3, 0, 0, 7, 0, 0, 0, 0],
+        [6, 0, 0, 1, 9, 5, 0, 0, 0],
+        [0, 9, 8, 0, 0, 0, 0, 6, 0],
+        [8, 0, 0, 0, 6, 0, 0, 0, 3],
+        [4, 0, 0, 8, 0, 3, 0, 0, 1],
+        [7, 0, 0, 0, 2, 0, 0, 0, 6],
+        [0, 6, 0, 0, 0, 0, 2, 8, 0],
+        [0, 0, 0, 4, 1, 9, 0, 0, 5],
+        [0, 0, 0, 0, 8, 0, 0, 7, 9]
+    ]
+    return extracted_grid
+
+# Функция для решения судоку
+def solve_sudoku(grid):
+    # Пустая клетка обозначена как 0
+    def is_valid(num, row, col):
+        # Проверяем строку
+        if num in grid[row]:
+            return False
+
+        # Проверяем колонку
+        if num in [grid[i][col] for i in range(9)]:
+            return False
+
+        # Проверяем 3x3 квадрат
+        start_row, start_col = 3 * (row // 3), 3 * (col // 3)
+        for i in range(start_row, start_row + 3):
+            for j in range(start_col, start_col + 3):
+                if grid[i][j] == num:
+                    return False
+
+        return True
+
+    def solve():
+        for row in range(9):
+            for col in range(9):
+                if grid[row][col] == 0:
+                    for num in range(1, 10):
+                        if is_valid(num, row, col):
+                            grid[row][col] = num
+                            if solve():
+                                return True
+                            grid[row][col] = 0
+                    return False
+        return True
+
+    solve()
+    return grid
+
+
+def handle_saved_photo(file_name, message):
+    """
+    Обрабатывает сохраненное фото, решает судоку и отправляет результат пользователю.
+    """
+    # Получаем размер изображения в пикселях
+    with Image.open(file_name) as img:
+        width, height = img.size
+
+    # Проверяем размер изображения
+    if width == 591 and height == 1280:
+        # Извлекаем судоку из изображения
+        sudoku_grid = find_digit.sudoku_image_to_array(file_name)
+
+        # Решаем судоку
+        solved_grid = solve_sudoku(sudoku_grid)
+        bot.send_message(message.chat.id, "Судоку решено!")
+        # Отправляем сердечко
+        bot.send_message(message.chat.id, "😀️")
+
+        # Накладываем решение на изображение
+        find_digit.overlay_sudoku_solution(file_name, solved_grid)
+
+        # Формируем имя выходного файла
+        base_name, ext = os.path.splitext(file_name)
+        solved_image_path = f"{base_name}_solved{ext}"
+
+        # Отправляем обработанное изображение пользователю
+        with open(solved_image_path, 'rb') as solved_image:
+            bot.send_photo(message.chat.id, solved_image)
+
+
+try:
+    bot = telebot.TeleBot(token)
+    print("Бот создан успешно")
+except Exception as e:
+    print(f"Ошибка при создании бота: {e}")
+
+try:
+    bot_info = bot.get_me()
+    print(bot_info)
+except Exception as e:
+    print(f"Ошибка get_me: {e}")
+
+@bot.message_handler(func = lambda message: True)
+def handle_message(message):
+    bot.reply_to(message, "Ваше сообщение прочитано!")
+    # Сохраняем данные сообщения в лог-файл
+    log_message(message)
+
+
+@bot.message_handler(content_types=['photo'])
+def handle_photo(message):
+    print(f"ID файла: {message.photo[-1].file_id}")  # ID файла фото
+    bot.reply_to(message, "Спасибо за фото!")
+    # Сохраняем данные сообщения в лог-файл
+    log_message(message)
+
+
+while True:
+    try:
+        bot.infinity_polling(timeout = 10, long_polling_timeout = 5)
+    except Exception as e:
+        print(f"Ошибка bot.infinity_polling: {e}")
+
